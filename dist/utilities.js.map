{"version":3,"sources":["../src/utilities.js"],"names":[],"mappings":";;AAAA,MAAM,CAAC,OAAO,GAAG;AAChB,cAAa,EAAE,uBAAS,UAAU,EAAC;AAClC,SAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;EAC/B;AACD,UAAS,EAAE,mBAAS,IAAI,EAAC;;AAExB,MAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACtB,MAAI,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AACjB,SAAO,IAAI,CAAC;EACZ;AACD,WAAU,EAAE,oBAAS,KAAK,EAAC;;;;;;;;;;;AAW1B,MAAI,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAElC,MAAI,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AAC9B,MAAI,QAAQ,GAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;;AAE/C,UAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,IAAI,GAAG,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC9E,UAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC;AACjE,UAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,IAAI,GAAG,QAAQ,GAAG,KAAK,CAAC;;AAEnE,MAAI,UAAU,GAAE,EAAE,CAAC;AACnB,MAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;;AAEnC,MAAI,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,EAAC;AAC/B,aAAU,CAAC,SAAS,CAAC,GAAG,EAAC,GAAG,EAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,CAAC;GACjD,MACI,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,EAAC;AACjC,aAAU,CAAC,SAAS,CAAC,GAAG,EAAC,GAAG,EAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,CAAC;GACjD,MACI,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAC;AAC9B,aAAU,CAAC,SAAS,CAAC,GAAG,EAAC,GAAG,EAAC,QAAQ,EAAC,CAAC;GACvC,MACI,IAAI,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,EAAC;AACpC,aAAU,CAAC,SAAS,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,CAAC;GAClC,MACI,IAAI,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,EAAC;AAClC,aAAU,CAAC,SAAS,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,CAAC;GAClC,MACI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC;AAC1B,aAAU,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;GACjC,MACG;AACH,UAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAA;AAC1C,aAAU,GAAG,IAAI,CAAC;GAClB;;AAED,SAAO,UAAU,CAAC;EAClB;CACD,CAAA","file":"utilities.js","sourcesContent":["module.exports = {\n\tgetFieldNames: function(collection){\n\t\treturn Object.keys(collection);\n\t},\n\tstripPath: function(path){\n\n\t\tpath = path.split(\"/\")\n\t\tpath.splice(0,1);\n\t\treturn path;\n\t},\n\tparseQuery: function(query){\n\t\t/*\n\t\tSample queries:\n\t\t\t/completed_is_true\n\t\t\t/user_is_lauren\n\t\t\t/age_is_greater_than_21\n\t\t\t/event_is_in_the_future\n\t\t\t/event_was_in_the_past\n\t\t\t/name_is_not_andrew\n\t\t*/\n\n\t\tvar queryWords = query.split('_');\n\n\t\tvar fieldName = queryWords[0];\n\t\tvar lastWord  = queryWords[queryWords.length-1]\n\n\t\tlastWord = lastWord.match(/^(\\d)*$/) === null ? lastWord : parseInt(lastWord);\n\t\tlastWord = lastWord.match(/^(true)$/) === null ? lastWord : true;\n\t\tlastWord = lastWord.match(/^(false)$/) === null ? lastWord : false;\n\n\t\tvar mongoQuery ={};\n\t\tvar now = new Date().toISOString();\n\n\t\tif (query.match(/greater_than/)){\n\t\t\tmongoQuery[fieldName] = {$gt:parseInt(lastWord)};\n\t\t}\n\t\telse if (query.match(/less_than/)){\n\t\t\tmongoQuery[fieldName] = {$lt:parseInt(lastWord)};\n\t\t}\n\t\telse if (query.match(/is_not/)){\n\t\t\tmongoQuery[fieldName] = {$ne:lastWord};\n\t\t}\n\t\telse if (query.match(/is_in_future/)){\n\t\t\tmongoQuery[fieldName] = {$gt:now};\n\t\t}\n\t\telse if (query.match(/is_in_past/)){\n\t\t\tmongoQuery[fieldName] = {$lt:now};\n\t\t}\n\t\telse if (query.match(/is/)){\n\t\t\tmongoQuery[fieldName] = lastWord;\n\t\t}\n\t\telse{\n\t\t\tconsole.log('does not match any patterns')\n\t\t\tmongoQuery = null;\n\t\t}\n\n\t\treturn mongoQuery;\n\t}\n}\n"]}