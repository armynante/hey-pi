{"version":3,"sources":["../../src/routes/register.js"],"names":[],"mappings":";;;;;;;;uBAAoB,SAAS;;;;wBACX,cAAc;;;;wBACb,cAAc;;;;2BACX,iBAAiB;;;;4BACvB,cAAc;;;;0BACP,aAAa;;;;AAEpC,IAAI,MAAM,GAAG,qBAAQ,MAAM,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4B9B,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,UAAC,GAAG,EAAC,GAAG,EAAK;AAC3B,MAAI,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpC,MAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAE,YAAK;AACzC,WAAO,IAAI,CAAC,IAAI,EAAE,CAAC;GACpB,CAAC,CACF,IAAI,CAAC,UAAC,IAAI,EAAK;AACZ,OAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC3C,CAAC,SACG,CAAC,UAAC,GAAG,EAAK;AACf,OAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;GACvC,CAAC,CAAA;CACF,CAAC,CAAA;;AAEF,MAAM,CAAC,IAAI,CAAC,eAAe,EAAC,UAAC,GAAG,EAAC,GAAG,EAAK;AACxC,MAAI,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,EAAC,CAAC;;AAE5D,cAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AAChC,OAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC1C,CAAC,SACG,CAAC,UAAC,GAAG,EAAK;AACd,OAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC7C,CAAC,CAAA;CACF,CAAC,CAAA;;qBAGa,MAAM","file":"register.js","sourcesContent":["import express from 'express'\nimport Mongo from '../server.js';\nimport config from '../config.js';\nimport utilities from '../utilities.js';\nimport jwt from 'jsonwebtoken';\nimport bodyParser from 'body-parser';\n\nvar router = express.Router();\n\n// var registerUser = function(user) {\n// \t// save the user\n//   var promise = new Promise(\n//     (resolve, reject) => {\n//     \tutilities.generateHash(user.pass).then((hash) => {\n//     \t\tuser.pass = hash;\n//     \t\treturn Mongo._save('users',user);\n//     \t})\n//     \t.then((savedUser) => {\n//     \t\t//if the user is created assign a token\n//     \t\tvar token = jwt.sign(savedUser, config.secret, {\n//     \t\t\texpiresInMinutes: 1440 //24r\n//     \t\t});\n//     \t\t// remover clear text pass\n//     \t\tdelete savedUser['pass'];\n//     \t\tsavedUser['token'] = token;\n//     \t\tresolve({code: 201, message: savedUser});\n//       })\n//       .catch((err) => {\n//         reject({code:500, message: err});\n//       })\n//     }\n//   )\n//   return promise;\n// }\n\nrouter.post('/',(req,res) => {\n  var user = new User(req.body.email);\n  user.setPassword(req.body.pass).then( ()=> {\n    return user.save();\n  })\n\t.then((resp) => {\n     res.status(resp.code).json(resp.message);\n  })\n\t.catch((err) => {\n\t\tres.status(err.code).json(err.message);\n\t})\n})\n\nrouter.post('/:email/:pass',(req,res) => {\n\tvar user = { email: req.params.email, pass: req.params.pass};\n\t// save the user\n  registerUser(user).then((resp) => {\n    res.status(resp.code).json(resp.message);\n  })\n .catch((err) => {\n   res.status(err.code).json(err.body.message);\n })\n})\n\n\nexport default router\n"]}