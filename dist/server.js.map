{"version":3,"sources":["../src/server.js"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["\"use strict\";\n\nimport { MongoClient } from './MongoClient.js';\nimport collectionUtil from './collectionUtil.js';\nimport utilities from './utilities.js';\nimport express from 'express';\nimport jwt from 'jsonwebtoken';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport bcrypt from 'bcrypt';\n\nconst url = 'mongodb://localhost:27017/hey-pi';\nconst secret = 'SUPERCEREALGUYS';\n\nvar Mongo = new MongoClient();\n\n//INTIALIZE EXPRESS:\nvar app = express();\n\n//LOAD THE DATABASE\nMongo._dbConnect(url);\n\n//SETUP\napp.use(morgan('dev')); //logging\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\nvar urlStrip = function(req, res, next) {\n\tvar path = utilities.stripPath(req.url);\n\treq.strip_path = path;\n\tnext();\n};\n\nvar checkAuth = function(req, res, next) {\n\tconsole.log(\"in check auth\");\n\tvar token = req.body.token || req.query.token || req.headers['x-access-token'];\n\tif (token) {\n\t\tjwt.verify(token, secret, (err,valid) => {\n\t\t\tif (err) {\n\t\t\t\tres.json({ success: false, message: 'Failed to authenticate token.' });\n\t\t\t} else {\n\t\t\t\treq.authorized = valid;\n\t\t\t}\n\t\t});\n\t} else {\n\t\tres.json({ success: false, message: 'Failed to provide authentication token.' });\n\t}\n\tnext();\n}\n\napp.route('/register/:email/:pass')\n\n.post((req,res) => {\n\tvar user = { email: req.params.email, pass: req.params.pass};\n\n\t// save the user\n\tutilities.generateHash(user.pass).then((hash) => {\n\t\tuser.pass = hash;\n\t\treturn Mongo._save('users',user);\n\t})\n\t.then((savedUser) => {\n\t\t//if the user is created assign a token\n\t\tvar token = jwt.sign(savedUser, secret, {\n\t\t\texpiresInMinutes: 1440 //24r\n\t\t});\n\n\t\t// remover clear text pass\n\t\tdelete savedUser['pass'];\n\t\tsavedUser['token'] = token;\n\t\tres.json(savedUser);\n\t})\n\t.catch((err) => {\n\t\tres.json(err);\n\t})\n});\n\napp.route('/authorize')\n\n.post((req,res) => {\n\tvar email = req.body.email || req.query.email;\n\tvar pass = req.body.pass || req.query.pass;\n\n\tvar user = { \"email\": email, \"pass\": pass};\n\t//find user and test pass\n\tMongo._getData(['users','email_is_' + email]).then((resp) => {\n\t\t//if we get a match\n\t\tif (resp.body.length) {\n\t\t\tvar user = resp.body[0];\n\t\t\t//test the password\n\t\t\tbcrypt.compare(pass, user.pass, (err,valid) => {\n\n\t\t\t\tif(valid) {\n\t\t\t\t\tvar token = jwt.sign(user, secret, {\n\t\t\t\t\t\texpiresInMinutes: 1440 //24r\n\t\t\t\t\t});\n\n\t\t\t\t\tuser['token'] = token;\n\t\t\t\t\tdelete user['pass'];\n\t\t\t\t\tuser['authorized'] = true;\n\t\t\t\t\tres.json(user);\n\n\t\t\t\t} else {\n\t\t\t\t\tres.json({success: false, message:\"password incorrect\"});\n\t\t\t\t}\n\n\t\t\t});\n\t\t} else {\n\t\t\tres.json({success: false, message:\"no user found with that email\"});\n\t\t}\n\t})\n\t.catch((err) => {\n\t\tdebugger;\n\t});\n});\n\n//Check authentication before proceeding to api\napp.use(checkAuth);\n\n//strip path\napp.use(urlStrip);\n\n//api routes\napp.route('/api/*')\n\t.get((req, res) => {\n\t\tconsole.log(\"getting here\");\n\t\tMongo._getData(req.strip_path).then((data) => {\n\t\t\tres.json(data);\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t});\n\t});\n\n\n\nvar server = app.listen(3000, function() {\n\tvar host = server.address().address;\n\tvar port = server.address().port;\n\n\tconsole.log('Listening at http://%s:%s', host, port);\n});\n"]}